# Example Automation Rules for PMA Backend Go
# This file demonstrates various automation scenarios using the PMA Automation Engine

# 1. Basic Light Control
# Turn on living room lights when motion is detected
- id: "motion_lights"
  name: "Motion Activated Lights"
  description: "Turn on living room lights when motion is detected"
  enabled: true
  execution_mode: "single"
  
  triggers:
    - type: "state"
      entity_id: "binary_sensor.living_room_motion"
      to: "on"
  
  conditions:
    - type: "state"
      entity_id: "sun.sun"
      state: "below_horizon"
  
  actions:
    - type: "service"
      service: "light.turn_on"
      data:
        entity_id: "light.living_room"
        brightness: 255

# 2. Security System
# Send notification and turn on all lights when door opens at night
- id: "security_alert"
  name: "Security Alert"
  description: "Security response when door opens at night"
  enabled: true
  execution_mode: "parallel"
  
  triggers:
    - type: "state"
      entity_id: "binary_sensor.front_door"
      to: "on"
  
  conditions:
    - type: "and"
      conditions:
        - type: "time"
          after: "22:00:00"
          before: "06:00:00"
        - type: "state"
          entity_id: "alarm_control_panel.home"
          state: "armed_away"
  
  actions:
    - type: "notification"
      message: "üö® Security Alert: Front door opened while armed!"
      target: "all"
      priority: "high"
    - type: "service"
      service: "light.turn_on"
      data:
        entity_id: "all"
        brightness: 255
        color_name: "red"

# 3. Morning Routine
# Automated morning routine triggered by time and presence
- id: "morning_routine"
  name: "Morning Routine"
  description: "Start the day with automated morning routine"
  enabled: true
  execution_mode: "queued"
  
  triggers:
    - type: "time"
      at: "07:00:00"
  
  conditions:
    - type: "and"
      conditions:
        - type: "time"
          weekday:
            - "mon"
            - "tue"
            - "wed"
            - "thu"
            - "fri"
        - type: "state"
          entity_id: "device_tracker.smartphone"
          state: "home"
  
  actions:
    - type: "service"
      service: "light.turn_on"
      data:
        entity_id: "light.bedroom"
        brightness: 50
    - type: "delay"
      duration: "30s"
    - type: "service"
      service: "media_player.play_media"
      data:
        entity_id: "media_player.bedroom_speaker"
        media_content_id: "morning_playlist"
        media_content_type: "playlist"
    - type: "delay"
      duration: "2m"
    - type: "service"
      service: "climate.set_temperature"
      data:
        entity_id: "climate.bedroom"
        temperature: 22

# 4. Energy Management
# Turn off non-essential devices when energy usage is high
- id: "energy_saver"
  name: "Energy Saver"
  description: "Reduce energy consumption during peak usage"
  enabled: true
  execution_mode: "single"
  
  triggers:
    - type: "state"
      entity_id: "sensor.total_power_consumption"
      above: 5000  # Watts
      for: "5m"
  
  conditions:
    - type: "numeric"
      entity_id: "sensor.electricity_price"
      above: 0.25  # Price per kWh
  
  actions:
    - type: "notification"
      message: "‚ö° High energy usage detected. Reducing consumption..."
      target: "mobile"
    - type: "service"
      service: "switch.turn_off"
      data:
        entity_id: 
          - "switch.electric_heater"
          - "switch.dishwasher"
          - "switch.washing_machine"
    - type: "service"
      service: "climate.set_temperature"
      data:
        entity_id: "climate.living_room"
        temperature: 19

# 5. Weather-Based Automation
# Close blinds and adjust AC when it's sunny and hot
- id: "weather_response"
  name: "Weather Response"
  description: "Adjust home environment based on weather"
  enabled: true
  execution_mode: "single"
  
  triggers:
    - type: "state"
      entity_id: "weather.home"
      attribute: "temperature"
      above: 28
  
  conditions:
    - type: "and"
      conditions:
        - type: "state"
          entity_id: "weather.home"
          state: "sunny"
        - type: "time"
          after: "10:00:00"
          before: "18:00:00"
  
  actions:
    - type: "service"
      service: "cover.close_cover"
      data:
        entity_id: "cover.living_room_blinds"
    - type: "service"
      service: "climate.set_temperature"
      data:
        entity_id: "climate.living_room"
        temperature: 24
        hvac_mode: "cool"

# 6. Presence-Based Automation
# Welcome home routine when arriving
- id: "welcome_home"
  name: "Welcome Home"
  description: "Automated welcome sequence when arriving home"
  enabled: true
  execution_mode: "queued"
  
  triggers:
    - type: "state"
      entity_id: "device_tracker.smartphone"
      to: "home"
      from: "not_home"
  
  conditions:
    - type: "state"
      entity_id: "binary_sensor.someone_home"
      state: "off"
      for: "1h"  # Only if house was empty
  
  actions:
    - type: "notification"
      message: "üè† Welcome home! Setting up your environment..."
      target: "mobile"
    - type: "service"
      service: "light.turn_on"
      data:
        entity_id: "light.entrance"
        brightness: 255
    - type: "conditional"
      condition:
        type: "state"
        entity_id: "sun.sun"
        state: "below_horizon"
      actions:
        - type: "service"
          service: "light.turn_on"
          data:
            entity_id: "group.living_room_lights"
            brightness: 180
    - type: "service"
      service: "climate.set_temperature"
      data:
        entity_id: "climate.living_room"
        temperature: 22
    - type: "service"
      service: "media_player.turn_on"
      data:
        entity_id: "media_player.living_room_tv"

# 7. Night Security
# Comprehensive night security routine
- id: "night_security"
  name: "Night Security"
  description: "Activate night security measures"
  enabled: true
  execution_mode: "single"
  
  triggers:
    - type: "time"
      at: "23:00:00"
  
  conditions:
    - type: "state"
      entity_id: "binary_sensor.someone_home"
      state: "on"
  
  actions:
    - type: "service"
      service: "lock.lock"
      data:
        entity_id: "all"
    - type: "service"
      service: "alarm_control_panel.alarm_arm_home"
      data:
        entity_id: "alarm_control_panel.home"
    - type: "service"
      service: "light.turn_off"
      data:
        entity_id: "group.all_lights"
    - type: "service"
      service: "light.turn_on"
      data:
        entity_id: "light.hallway"
        brightness: 10  # Night light
    - type: "notification"
      message: "üåô Good night! Security system activated."
      target: "mobile"

# 8. Advanced Composite Trigger Example
# Complex automation with multiple trigger types
- id: "complex_automation"
  name: "Complex Multi-Trigger Automation"
  description: "Demonstrates composite triggers and advanced conditions"
  enabled: true
  execution_mode: "parallel"
  
  triggers:
    - type: "composite"
      logic: "or"
      triggers:
        - type: "state"
          entity_id: "binary_sensor.garage_door"
          to: "on"
        - type: "webhook"
          webhook_id: "garage_notification"
        - type: "event"
          event_type: "garage_activity"
  
  conditions:
    - type: "and"
      conditions:
        - type: "state"
          entity_id: "binary_sensor.someone_home"
          state: "on"
        - type: "or"
          conditions:
            - type: "time"
              after: "06:00:00"
              before: "22:00:00"
            - type: "state"
              entity_id: "input_boolean.guest_mode"
              state: "on"
  
  actions:
    - type: "conditional"
      condition:
        type: "state"
        entity_id: "binary_sensor.garage_door"
        state: "on"
      actions:
        - type: "service"
          service: "light.turn_on"
          data:
            entity_id: "light.garage"
            brightness: 255
        - type: "delay"
          duration: "10m"
        - type: "service"
          service: "light.turn_off"
          data:
            entity_id: "light.garage"
    - type: "variable"
      action: "set"
      variable: "last_garage_activity"
      value: "{{ now() }}"
    - type: "notification"
      message: "üöó Garage activity detected at {{ now().strftime('%H:%M') }}"
      target: "mobile" 